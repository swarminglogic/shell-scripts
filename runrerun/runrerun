#!/bin/sh

self() {
    basename $0
}

show_usage_and_exit() {
echo "Utilty for launching and subsequently re-launching commands by remote trigger
This is particularly useful for restarting servers during development, or
setting up global hotkeys for triggering commands.

EXAMPLE USAGE:
    # Example: Running a script, and retriggering it from wherever
    $(self) --begin=FOO ./bar.sh
    $(self) --restart=FOO

    # Example: Using a flag in CMD
    $(self) --begin=FOO './bar.sh --baz'

    # Example: Escaping flags in CMD using --
    $(self) --begin=FOO -- ./bar.sh --baz

    # Example: Specifying kill-method
    $(self) --begin=FOO --kill-method=nice-kill ./bar.sh
    $(self) --restart=FOO

    # Shorthand version:
    $(self) -b FOO -k nice-kill ./bar.sh
    $(self) -r FOO

    # Example: Sharing key with multiple concurrent jobs
    $(self) --begin=FOO --attach ./bar.sh
    $(self) --begin=FOO --attach ./bar.sh
    $(self) --restart=FOO
    # Note: --attach is only necessary on subsequent --begin, and is ignored otherwise

USAGE:
    $(self) (--begin|--restart|--stop)=KEY (OPTIONS) ([--] CMD)
    $(self) (-b|-r|-s) <KEY> (OPTIONS) ([--] CMD)

USAGE (--begin):
    $(self) --begin=KEY [--kill-method=METHOD] [--attach] [--] <CMD..>
    $(self) -b <KEY> [-k METHOD] [-a] [--] <CMD..>

USAGE (--restart):
    $(self) --restart=KEY
    $(self) -r <KEY>

USAGE (--stop):
    $(self) --stop=KEY
    $(self) -s <KEY>

OPTIONS:
    --begin=KEY,-b KEY      A user-defined key that must be shared between --begin and --restart
                            stages. KEY is used to identify the process.
    --attach,-a             Allows to reuse an active KEY. All jobs sharing the key will receive
                            the restart signal.
    --restart=KEY,-r KEY    Restarts a job started with --begin, with the same KEY
    --kill-method=METHOD,   Specifies termination method. Used only with --beging. See details below
               -k METHOD
    --stop=KEY,-s KEY       Sends a stop signal to all the active jobs. It is an alternative to
                            stopping the jobs individually (e.g. with CTRL-C)
    --                      All arguments passed after the double-hyphen is considered part of CMD
    <CMD>                   The command that is run on every re-run.
    --clear-on-run          Clears the terminal window between each triggered execution
    -h,--help               Show this help text
    -v,--verbose            Output all commands

METHOD:
          The method used to kill the running process
                term            - Sends a SIGTERM (default)
                kill            - Sends a SIGKILL
                int             - Sends a SIGINT
                hup             - Sends a SIGHUP
                double-int      - Sends two SIGINT, particularly useful for docker-compose
                nice-kill       - Sends a SIGTERM, SIGINT, SIGHUP and finally SIGKILL, in
                                    that order, with a short 2 second delay between each.
                                    Use this if you don't want to bother with figuring out which
                                    would be best suited.
"
    exit ${1:-0}
}

parse_arguments() {
    if [ $# -lt 1 ] ; then
        show_usage_and_exit 0
    fi
    while test $# -gt 0; do
        case "$1" in
            -h|--help)
                show_usage_and_exit 0 ;;
            -v|--verbose)
                set -x
                shift ; verbose_flag=true
                ;;
            -b)
                shift ; begin_key=$1 ; if [ $# -lt 1 ] ; then echo_error "-b KEY missing. See --help" ; exit 1 ; fi
                shift
                ;;
            --begin=*)
                begin_key=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            -r)
                shift ; restart_key=$1 ; if [ $# -lt 1 ] ; then echo_error "-r KEY missing. See --help" ; exit 1 ; fi
                shift
                ;;
            --restart=*)
                restart_key=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            -k)
                shift ; kill_method=$1 ; if [ $# -lt 1 ] ; then echo_error "-k METHOD missing. See --help" ; exit 1 ; fi
                shift
                ;;
            --kill-method=*)
                kill_method=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            -a|--attach)
                shift ; attach_flag=true
                ;;
            --clear-on-run)
                shift ; clear_on_run_flag=true
                ;;
            -s)
                shift ; stop_key=$1 ; if [ $# -lt 1 ] ; then echo_error "-s KEY missing. See --help" ; exit 1 ; fi
                shift
                ;;
            --stop=*)
                stop_key=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            -- )
                pass_through=true
                shift
                cmd="$cmd $@"
                break
                ;;
            -*)
                if [ "$cmd" ] ; then
                    echo_error "Invalid flag: $1. If part of CMD, use '--' to escape arguments"
                else
                    echo_error "Invalid flag: $1"
                fi
                exit 1
                ;;
            *)
                cmd="$cmd $1"
                shift
                ;;
        esac
    done
}

tty_available() {
    [ -t 1 ]
}

if [ tty_available ] ; then
    YELLOW='\033[1;33m'
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    RESET='\033[0m'
else
    YELLOW=''
    GREEN=''
    RED=''
    RESET=''
fi
echo_error() {
    echo "${RED}ERROR${RESET} $@" 1>&2
}

echo_info() {
    echo "${GREEN}$@${RESET}"
}

process_arguments_check_kill_method_valid() {
        if [ "$kill_method" ] ; then
            echo_error "--kill-method=METHOD has effect only in --begin mode." ; exit 1
        fi
}
process_arguments() {
    # Check main flag
    local n_main_flags=0
    [ $begin_key ]   && n_main_flags=$((n_main_flags+1))
    [ $restart_key ] && n_main_flags=$((n_main_flags+1))
    [ $stop_key ]    && n_main_flags=$((n_main_flags+1))
    if [ $n_main_flags -eq 0 ] ; then
        echo_error "One of --begin,--restart,--stop is required" ; exit 1
    elif [ $n_main_flags -gt 1 ] ; then
        echo_error "Only one of --begin,--restart,--stop can used" ; exit 1
    fi
    unset n_main_flags

    if [ "$begin_key" ] ; then
        BEGIN_KEY=${begin_key}
        if [ ! "$cmd" ] ; then
            echo_error "CMD must be set when in --begin mode. See --help" ; exit 1
        fi
        CMD="$cmd"

        # Default kill method
        kill_method=${kill_method:-"term"}
        if [ "$kill_method" != "term"  \
          -a "$kill_method" != "kill" \
          -a "$kill_method" != "int" \
          -a "$kill_method" != "hup" \
          -a "$kill_method" != "double-int" \
          -a "$kill_method" != "nice-kill" ] ; then
            echo_error "Invalid --kill-method=METHOD. See --help for possible values" ; exit 1
        fi
        KILL_METHOD="$kill_method"
    fi
    if [ "$restart_key" ] ; then
        RESTART_KEY=${restart_key}
        process_arguments_check_kill_method_valid
    fi
    if [ "$stop_key" ] ; then
        STOP_KEY=${stop_key}
        process_arguments_check_kill_method_valid
    fi
    KEY=${BEGIN_KEY:-${RESTART_KEY:-${STOP_KEY}}}
    TEMP_KEY_FILE="/tmp/.runrerun_keyfile_${KEY}"
}

trap 'cleanup_interrupted' INT TERM
trap 'cleanup_common' EXIT
cleanup_interrupted() {
    trap - TERM
    trap - INT
    cleanup_common
    kill -- -$$ >/dev/null 2>&1
}

#$1: pid
remove_pid_from_key_file() {
    if grep "^$1\$" --quiet "${TEMP_KEY_FILE}" ; then
        grep -v "^$1\$" "${TEMP_KEY_FILE}" > "${TEMP_KEY_FILE}.without"
        mv "${TEMP_KEY_FILE}.without" "${TEMP_KEY_FILE}" > /dev/null 2>&1
    fi
}

delete_key_file_if_empty() {
    if [ -f "$TEMP_KEY_FILE" ] && [ $(wc -l "$TEMP_KEY_FILE" | cut -d\  -f1) -eq 0 ] ; then
        rm -- "${TEMP_KEY_FILE}" 2>&1 > /dev/null
    fi
}

cleanup_common() {
    if [ "${BEGIN_KEY}" ] ; then
        if [ -f "${TEMP_KEY_FILE}" ] ; then
            remove_pid_from_key_file $$
            delete_key_file_if_empty
        fi
        if [ "$verbose_flag" ] ; then
            set +x
        fi
        if [ "$CMD_PID" ] && is_process_alive $CMD_PID ; then
            terminate_cmd
        fi
    fi
}

is_any_process_alive()  {
    local any_ok=
    for pid in $@; do
        if is_process_alive $pid ; then
            any_ok=true
        fi
    done
    [ $any_ok ]
}

is_process_alive()  {
   [ $(ps -p $1 | wc -l) -gt 1 ]
}

process_ids() {
    cat "$TEMP_KEY_FILE"
}

generate_temporary_key_file() {
    if [ -f "${TEMP_KEY_FILE}" ] ; then
        if is_any_process_alive $(process_ids) ; then
            if [ ! "$attach_flag" ] ; then
                echo_error "KEY already in use by active process. Consider using --attach. Terminating" ; exit 1
            fi
        else
            rm -- "${TEMP_KEY_FILE}"
        fi
    fi
    echo $$ >> "${TEMP_KEY_FILE}"
}

run_artificial_wait_in_background() {
    tail -f /dev/null
}

# Needed because some shells provde built-in echo that
# can cause issues from being non-posix compliant
native_echo() {
    $(which echo) "$@"
}

HAS_REACHED_END=
CMD_PID=
run_command_in_background() {
    # Clear the current output line, which should only be the 'waiting' info
    # line below, if has ever been printed
    if [ "$HAS_REACHED_END" ] ; then
        native_echo -en '\033[2K\r'
    fi
    if [ "$clear_on_run_flag" ] ; then
        clear
    fi
    script --quiet --return -c "$@" /dev/null &
    CMD_PID="$!"
    wait $CMD_PID
    # In the case of command actually terminating
    echo -n "${YELLOW}Waiting for reruns...${RESET}"
    HAS_REACHED_END=true
    run_artificial_wait_in_background &
    CMD_PID="$!"
    wait $CMD_PID
}

# Quick return of process termination attempt
# It waits at most 1 seconds to verify, and will break of immedately if
# the process terminated.
# Returns false if it failed, and true otherwise. Allowing for short cirquit
# termination with OR-operator.
kill_process() {
    kill -s $1 $CMD_PID
    sleep 0.1
    for i in $(seq 0 9) ; do
        if is_process_alive $CMD_PID ; then
            sleep 0.1;
        else
            return 0;
        fi
    done
    return 1;
}

terminate_cmd() {
    case $KILL_METHOD in
        term)
            kill -s TERM $CMD_PID
            ;;
        kill)
            kill -s KILL $CMD_PID
            ;;
        int)
            kill -s INT  $CMD_PID
            ;;
        hup)
            kill -s HUP  $CMD_PID
            ;;
        double-int)
            kill -s INT $CMD_PID ; sleep 0.2
            kill -s INT $CMD_PID
            ;;
        nice-kill)
            kill_process TERM || \
                kill_process INT || \
                kill_process HUP || \
                kill_process KILL
            ;;
    esac
    # Waiting at most 4 seconds for the process to finish
    for i in $(seq 0 39) ; do
        if is_process_alive $CMD_PID ; then
            sleep 0.1;
        else
            return 0;
        fi
    done
    return 1
}

# This is the expected signal to receive when asked to restart the process
trap 'restart_request' USR1
restart_request() {
    if terminate_cmd ; then
        run_command_in_background "$CMD"
    else
        echo_error "Failed to terminate background process using $KILL_METHOD. Perhaps use a stronger method?"
    fi
}

# This is the expected signal to receive when asked to stop the job itself
trap 'stop_request' USR2
stop_request() {
    if ! terminate_cmd ; then
        echo_error "Failed to terminate background process using $KILL_METHOD. Using nice-kill method"
        KILL_METHOD='nice-kill'
        if ! terminate_cmd ; then
            echo_error "Still failed to terminate background process using $KILL_METHOD. Aborting and possibly leaving child thread hanging."
        fi
    fi
    if [ "$HAS_REACHED_END" ] ; then
        native_echo -en '\033[2K\r'
    fi
    echo "${GREEN}Stop signal received${RESET}"
    exit
}

verify_job_existance() {
    if [ ! -f "${TEMP_KEY_FILE}" ] ; then
        echo_error "Could not find matching process with KEY=$KEY Terminating" ; exit 1
    fi
    if ! is_any_process_alive $(process_ids) ; then
        echo_error "The initializing process, $(process_id), is not active. Terminating" ; exit 1
    fi
}

main() {
    parse_arguments "$@"
    process_arguments
    if [ "$BEGIN_KEY" ] ; then
        #   HANDLE INITIALIZATION
        generate_temporary_key_file
        run_command_in_background "$CMD"
        :
    elif [ "$RESTART_KEY" ] ; then
        #   SEND RESTART SIGNAL TO JOBS
        verify_job_existance
        for pid in "$(process_ids)" ; do
            echo "Sending restart signal to job with pid: $pid"
            kill -s USR1 ${pid}
        done
    elif [ "$STOP_KEY" ] ; then
        # SEND STOP SIGNAL TO JOBS
        verify_job_existance
        for pid in "$(process_ids)" ; do
            echo "Sending stop signal to job with pid: $pid"
            kill -s USR2 ${pid}
        done
    fi
}

main "$@"
