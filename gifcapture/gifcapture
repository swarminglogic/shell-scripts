#!/bin/sh

self() {
    basename $0
}

show_usage_and_exit() {
echo "Utilty for capturing an area of the screen, and generating an animated
and highly compressed gif as a result.

Prerequisite: xdotool xwininfo import mogrify maim

USAGE:
    $(self) [OPTIONS] --pick-window <GIF>
    $(self) [OPTIONS] --region[=REGION] <GIF>

EXAMPLES:
    $(self) --pick-window recording.gif
    $(self) --region recording.gif
    $(self) --region=0,0,1920,1080 recording.gif

OPTIONS:
    --pick-window,-p          Click the window that should be used for recording the gif
    --region(=[REGION])       If REGION is set, use these screen coordinates as is, otherwise use interactive
                              initialization through point-and-click.
    --delay=DELAY,-d DELAY    Set delay in seconds between each frame capture (default 0.1s)
    --fps=FPS                 Set delay between each frame capture, expressed as frames per second (default: 10)
                              Note: Must be an integer.
    --dry-run                 Do not start recording, but print out command to start the same recording
    --gif-no-loop             Turn of looping in generated gif animation
    -h,--help                 Show this help text
    -v,--verbose              Output all commands

    GIF
        Output filename of the gif to generate. This will override the target if it exists.

    REGION
        Region is defined from the top-left (TL) coordinate, and capture width and height, as a comma
        separated list, in the following order: TL-X, TL-Y, WIDTH, HEIGHT

"
    exit ${1:-0}
}


parse_arguments() {
    if [ $# -lt 1 ] ; then
        show_usage_and_exit 0
    fi
    while test $# -gt 0; do
        case "$1" in
            -h|--help)
                show_usage_and_exit 0 ;;
            -v|--verbose)
                set -x
                shift ; verbose_flag=true
                ;;
            -p|--pick-window)
                shift ; pick_window_flag=true
                ;;
            --region=*)
                region_flag=true
                region=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            --region)
                shift ; region_flag=true
                ;;
            -d)
                shift ; delay=$1 ; if [ $# -lt 1 ] ; then echo_error "-d DELAY missing. See --help" ; exit 1 ; fi
                shift
                ;;
            --delay=*)
                delay=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            --fps=*)
                fps=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            --dry-run)
                shift ; dry_run_flag=true
                ;;
            --gif-no-loop)
                shift ; gif_no_loop_flag=true
                GIF_LOOP=1
                ;;
            *)
                if [ ! "$gif_target" ] ; then
                    gif_target="$1"
                    shift
                else
                    echo_error "Unknown argument: $1. See --help"
                    exit 1
                fi
                ;;
        esac
    done
    # Defaults
    GIF_LOOP=${GIF_LOOP:-"0"}
}

check_command() {
    if ! command -v "$1" >/dev/null 2>&1 ; then
        echo_error "Command $1 was not found within PATH"
        exit 1
    fi
}

is_positive_integer() {
    [ ! -z "${1##*[!0-9]*}" ]
}

check_region_position_value() {
    if ! is_positive_integer "$1"  ; then
        echo_error "$1 is not a valid position integer in REGION. See --help" ; exit 64
    fi
    echo "$1"
}

check_region_size_value() {
    if ! is_positive_integer "$1" || [ "$1" -eq 0 ]  ; then
        echo_error "$1 is not a valid size integer in REGION. See --help" ; exit 64
    fi
    echo "$1"
}

validate_region_set() {
    if [ ! "$REGION_TL_X" -o ! "$REGION_TL_Y" -o ! "$REGION_WIDTH" -o ! "$REGION_HEIGHT" ] ; then
        exit 64
    fi
}

# $1: A 4 value comma separated integer list
parse_region() {
    if [ $(echo "$1" | tr -dc ',' | wc -c) -ne 3 ] ; then
        echo_error "Bad REGION definition. See --help" ; exit 64
    fi
    REGION_TL_X=$(check_region_position_value $(echo "$1" | cut -d, -f1))
    REGION_TL_Y=$(check_region_position_value $(echo "$1" | cut -d, -f2))
    REGION_WIDTH=$(check_region_size_value $(echo "$1" | cut -d, -f3))
    REGION_HEIGHT=$(check_region_size_value $(echo "$1" | cut -d, -f4))
    validate_region_set
}

process_arguments() {
    if [ ! "$gif_target" ] ; then
        echo_error "Expected GIF output target was not set. See --help" ; exit 1
    fi
    if [ ! "${pick_window_flag}" -a ! "${region_flag}" ] ; then
        echo_error "Either use --pick-window or --region. See --help" ; exit 1
    fi
    # Validate region
    if [ "$region_flag" ] ; then
        if [ "$region" ] ; then
            parse_region "$region"
        else
            INTERACTIVE_REGION=true
        fi
    fi
    # Process delay value
    if [ "$delay" -a "$fps" ] ; then
        echo_error "--delay and --fps are mutually exclusive." ; exit 1
    fi
    if [ "$fps" ] ; then
        if ! is_positive_integer "$fps" ; then
            echo_error "$fps is a bad FPS value. Expected a postitive integer" ; exit 1
        elif [ "$fps" -eq 0 ] ; then
            echo_error "FPS cannot be 0." ; exit 1
        fi
        delay=$(echo "scale=4; 1/$fps" | bc)
    fi
    DELAY=${delay:-"0.1"}
    # Check gif output target
    if [ ! $dry_run_flag ] ; then
        if [ -f "$gif_target" ] ; then
            GIF_TARGET_CREATED=true
        fi
        touch "$gif_target" >/dev/null 2>&1
        if [ $? -ne 0 ] || [ ! -f "$gif_target" ] ; then
            echo_error "Could not write to GIF output target: $gif_target" ; exit 1
        fi
    fi
    GIF_TARGET="$gif_target"
    create_gif_target_fw
}

create_gif_target_fw() {
    # Escape single quotes
    local gif_target_tmp="$(echo "$GIF_TARGET" | sed "s,',\\\',g")"
    # Determine need to surround with single quotes
    if echo "$GIF_TARGET" | grep -Eq '[ "]' ; then
        GIF_TARGET_FW="'$gif_target_tmp'"
    else
        GIF_TARGET_FW="$gif_target_tmp"
    fi
}

tty_available() {
    [ -t 1 ]
}
if [ tty_available ] ; then
    YELLOW='\033[1;33m'
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    RESET='\033[0m'
else
    YELLOW=''
    GREEN=''
    RED=''
    RESET=''
fi
echo_error() {
    echo "${RED}ERROR${RESET} $@" 1>&2
}

echo_info() {
    echo "${GREEN}$@${RESET}"
}

recreate_command_from_values() {
    echo "$(self) --region=${REGION_TL_X},${REGION_TL_Y},${REGION_WIDTH},${REGION_HEIGHT} --delay=${DELAY} $GIF_TARGET_FW"
}

region_from_pick_window() {
    echo_info "Click on window to record"
    xwindata=$(xwininfo)
    REGION_TL_X=$(echo "$xwindata" | grep '^  Absolute upper-left X:' | cut -d: -f2 | xargs echo )
    REGION_TL_Y=$(echo "$xwindata" | grep '^  Absolute upper-left Y:' | cut -d: -f2 | xargs echo )
    REGION_WIDTH=$(echo "$xwindata" | grep '^  Width:' | cut -d: -f2 | xargs echo )
    REGION_HEIGHT=$(echo "$xwindata" | grep '^  Height:' | cut -d: -f2 | xargs echo )
    validate_region_set
    clear_prev_line
}

native_echo() {
    $(which echo) "$@"
}

clear_line() {
    native_echo -en '\033[2K\r'
}

clear_prev_line() {
    native_echo -en "\033[1A\033[2K"
}

query_pause() {
    echo -n "${GREEN}$@${RESET}"
    read unused
}

interactive_region() {
    query_pause "Hover mouse cursor over top left corner and press <Enter>."
    eval $(xdotool getmouselocation --shell 2>/dev/null)
    REGION_TL_X=$X;
    REGION_TL_Y=$Y;
    clear_line
    echo "Got coordinate: ($REGION_TL_X, $REGION_TL_Y)"
    query_pause "Hover mouse cursor over bottom right corner and press <Enter>."
    eval $(xdotool getmouselocation --shell 2>/dev/null)
    REGION_WIDTH=$(($X-$REGION_TL_X))
    REGION_HEIGHT=$(($Y-$REGION_TL_Y))
     echo "Got dimensions: ($REGION_WIDTH, $REGION_HEIGHT)"
    parse_region "${REGION_TL_X},${REGION_TL_Y},${REGION_WIDTH},${REGION_HEIGHT}"
}

create_temporary_directory() {
    mktemp -d
}

trap 'cleanup_common' EXIT
cleanup_common() {
    if [ "${WORKDIR}" ] && [ -d "${WORKDIR}" ] ; then
        rm -f "${WORKDIR}"/*
        rmdir "${WORKDIR}"
    fi
    if [ "$verbose_flag" = true ] ; then
        set +x
    fi
}

FRAME_NUMBER=0
record_region() {
    query_pause "Press enter to start recording. CTRL+C to end recoding."
    clear_prev_line
    echo_info "[ RECORDING ] ${RESET}Use ${YELLOW}CTRL+C${RESET} to end recording"
    trap 'create_gif' INT TERM
    while true ; do
        FRAME_NUMBER=$((FRAME_NUMBER+1))
        capture_frame &
        # TODO: output status information (e.g. how many bad)
        sleep $DELAY
    done
}

determine_n_cpu_cores() {
    grep cores /proc/cpuinfo | head -n 1 | sed 's/.*:\s//g'
}

convert_png_frames_to_gif() {
    local N_CORES=$(determine_n_cpu_cores)
    local GIF_N_DITHER_COLORS=256
    CWD="$(pwd)"
    cd ${WORKDIR}
    ls *.png -1 | xargs -n 1 -P $(($N_CORES + 1)) sh \
        -c 'nice convert -monitor $1 +dither -colors '$GIF_N_DITHER_COLORS' $1.gif ' sh
    cd "${CWD}"
}

convert_progress_filter() {
    local N_FRAMES=$(ls -1 ${WORKDIR}/*.png | wc -l)
    APPROX_EXPECTED_COUNT=$((N_FRAMES*2))
    COUNT=0
    cat - | tr -dc '[:alnum:]\n\r' | while IFS= read -r line; do
        # ImageMagick does very strange things to the input stream. Making a copy, and
        # filtering again to be sure it doesn't change unexpectedly
        C_LINE="$(echo "$line" | tr -dc '[:alnum:]\n\r')"
        CURRENT_IMAGE_NUMBER=$(echo "$C_LINE" | sed -E 's/.*([0-9]{10})png.*/\1/g' | sed 's/^0*//')
        if is_positive_integer "$CURRENT_IMAGE_NUMBER" ; then
            if [ $COUNT -lt $APPROX_EXPECTED_COUNT ] ; then
               COUNT=$((COUNT+1))
            fi
            progress_bar $((COUNT)) $((APPROX_EXPECTED_COUNT)) 50 --no-count
        fi
    done
    clear_line
}

create_gif() {
    trap - INT TERM
    clear_prev_line
    local GIF_FUZZ_PERCENTAGE=9
    local N_FRAMES=$(ls -1 ${WORKDIR}/*.png | wc -l)
    clear_line
    echo "Converting ${N_FRAMES} captured frames to gif"
    convert_png_frames_to_gif 2>&1 3>&1 | convert_progress_filter
    echo "Generating gif animation: ${YELLOW}$GIF_TARGET${RESET}"

    local delay_tics=$(printf "%.0f\n" $(echo "$DELAY*100" | bc))
    convert -monitor -delay $delay_tics ${WORKDIR}/*.gif -loop $GIF_LOOP -layers Optimize \
        -fuzz $GIF_FUZZ_PERCENTAGE% "$GIF_TARGET" 2>&1 3>&1 | convert_progress_filter
    exit 0
}

capture_frame() {
    local frame_file="$WORKDIR/$(printf '%.10d.png' $FRAME_NUMBER)"
    maim --geometry=${REGION_WIDTH}x${REGION_HEIGHT}+${REGION_TL_X}+${REGION_TL_Y} $frame_file --quality=1
}

# $1:current $2:max $3:width [OPTIONS]
# OPTIONS:
#    --unit=UNIT
#    --no-percent
#    --no-count
progress_bar() {
    local current=$1 ; shift
    local max=$1 ; shift
    local width=$1 ; shift
    local unit=
    local no_percent_flag=
    local no_count_flag=
    # Parse arguments
    while test $# -gt 0; do
        case "$1" in
            --unit=*)
                unit="$(echo $1 | sed -e 's/^[^=]*=//g')"
                shift
                ;;
            --no-percent)
                shift ; no_percent_flag=true
                ;;
            --no-count)
                shift ; no_count_flag=true
                ;;
            *)
                shift
                ;;
        esac
    done
    # Process arguments
    if [ "$current" -gt "$max" ] ; then
        current=$max
    fi
    if [ "$max" -eq 0 ] ; then
        exit 1
    fi
    local PRECENTAGE=$(echo "scale=0; 100*${current}/${max}" | bc)
    local BAR_TICS=$(echo "scale=0; ${PRECENTAGE} * ${width} / 100" | bc)
    # Print the bar
    printf "["
    printf "#%.0s" $(seq 1 $BAR_TICS);
    printf " %.0s" $(seq 1 $(( $width - $BAR_TICS )));
    printf "] "
    if [ ! $no_percent_flag ] ; then
        printf "$PRECENTAGE%% "
    fi
    if [ ! $no_count_flag ] ; then
        printf "($current / $max $unit) "
    fi
    printf "\r"
}

WORKDIR=$(create_temporary_directory)
main() {
    parse_arguments "$@"
    check_command xdotool xwininfo convert import mogrify maim
    process_arguments

    # Determine region area
    if [ $INTERACTIVE_REGION ] ; then
        interactive_region
    elif [ $pick_window_flag ] ; then
        region_from_pick_window
    fi

    if [ "$dry_run_flag" ] ; then
        recreate_command_from_values
        exit 0
    fi

    # Start the recording process
    record_region
}

main "$@"
