#!/bin/sh

self() {
    basename $0
}

show_usage_and_exit() {
echo "Utilty for capturing an area of the screen, and generating an animated
and highly compressed gif as a result.

Prerequisite: xdotool

USAGE:
    $(self) [OPTIONS] --pick-window <GIF>
    $(self) [OPTIONS] --region[=TL,TR,BR,BL] <GIF>

OPTIONS:
    --pick-window,-p          Click the window that should be used for recording the gif
    --region(=[REGION])       If REGION is set, use these screen coordinates as is, otherwise use interactive
                              initialization through point-and-click.
    --delay=DELAY,-d DELAY    Set delay in seconds between each frame capture (default 0.2s)
    --fps=FPS                 Set delay between each frame capture, expressed as frames per second (default: 5)
                              Note: Must be an integer.
    --dry-run                 Do not start recording, but print out command to start the same recording
    -h,--help                 Show this help text
    -v,--verbose              Output all commands

GIF:
    Output filename of the gif to generate. This will override the target if it exists.

REGION:
    Region is defined from the top-left (TL) coordinate, and capture width and height, as a comma separated list,
    in the following order: TL-X, TL-Y, WIDTH, HEIGHT
    Example: Starting from top-left corner coordinate of 30,120, with a width of 300 by 200 pixels:
             --region=30,120,300,200
"
    exit ${1:-0}
}


parse_arguments() {
    if [ $# -lt 1 ] ; then
        show_usage_and_exit 0
    fi
    while test $# -gt 0; do
        case "$1" in
            -h|--help)
                show_usage_and_exit 0 ;;
            -v|--verbose)
                set -x
                shift ; verbose_flag=true
                ;;
            -p|--pick-window)
                shift ; pick_window_flag=true
                ;;
            --region=*)
                region_flag=true
                region=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            --region)
                shift ; region_flag=true
                ;;
            -d)
                shift ; delay=$1 ; if [ $# -lt 1 ] ; then echo_error "-d DELAY missing. See --help" ; exit 1 ; fi
                shift
                ;;
            --delay=*)
                delay=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            --fps=*)
                fps=$(echo $1 | sed -e 's/^[^=]*=//g')
                shift
                ;;
            --dry-run)
                shift ; dry_run_flag=true
                ;;
            *)
                if [ ! "$gif_target" ] ; then
                    gif_target="$1"
                    shift
                else
                    echo_error "Unknown argument: $1. See --help"
                    exit 1
                fi
                ;;
        esac
    done
}

check_command() {
    if ! command -v "$1" >/dev/null 2>&1 ; then
        echo_error "Command $1 was not found within PATH"
        exit 1
    fi
}

is_positive_integer() {
    [ ! -z "${1##*[!0-9]*}" ]
}

check_region_value() {
    if ! is_positive_integer "$1"  ; then
        echo_error "$1 is not a valid integer in REGION. See --help" ; exit 64
    fi
    echo "$1"
}

validate_region_set() {
    if [ ! "$REGION_TL_X" -o ! "$REGION_TL_Y" -o ! "$REGION_WIDTH" -o ! "$REGION_HEIGHT" ] ; then
        exit 64
    fi
}

# $1: A 4 value comma separated integer list
parse_region() {
    if [ $(echo "$1" | tr -dc ',' | wc -c) -ne 3 ] ; then
        echo_error "Bad REGION definition. See --help" ; exit 64
    fi
    REGION_TL_X=$(check_region_value $(echo "$1" | cut -d, -f1))
    REGION_TL_Y=$(check_region_value $(echo "$1" | cut -d, -f2))
    REGION_WIDTH=$(check_region_value $(echo "$1" | cut -d, -f3))
    REGION_HEIGHT=$(check_region_value $(echo "$1" | cut -d, -f4))
    validate_region_set
}

process_arguments() {
    if [ ! "$gif_target" ] ; then
        echo_error "Expected GIF output target was not set. See --help" ; exit 1
    fi
    if [ ! "${pick_window_flag}" -a ! "${region_flag}" ] ; then
        echo_error "Either use --pick-window or --region. See --help" ; exit 1
    fi
    # Validate region
    if [ "$region_flag" ] ; then
        if [ "$region" ] ; then
            parse_region "$region"
        else
            INTERACTIVE_REGION=true
        fi
    fi
    # Process delay value
    if [ "$delay" -a "$fps" ] ; then
        echo_error "--delay and --fps are mutually exclusive." ; exit 1
    fi
    if [ "$fps" ] ; then
        if ! is_positive_integer "$fps" ; then
            echo_error "$fps is a bad FPS value. Expected a postitive integer" ; exit 1
        elif [ "$fps" -eq 0 ] ; then
            echo_error "FPS cannot be 0." ; exit 1
        fi
        delay=$(echo "scale=4; 1/$fps" | bc)
    fi
    DELAY=${delay:-"0.2"}
}

tty_available() {
    [ -t 1 ]
}
if [ tty_available ] ; then
    YELLOW='\033[1;33m'
    GREEN='\033[0;32m'
    RED='\033[0;31m'
    RESET='\033[0m'
else
    YELLOW=''
    GREEN=''
    RED=''
    RESET=''
fi
echo_error() {
    echo "${RED}ERROR${RESET} $@" 1>&2
}

echo_info() {
    echo "${GREEN}$@${RESET}"
}

recreate_command_from_values() {
    echo "$(self) --region=${REGION_TL_X},${REGION_TL_Y},${REGION_WIDTH},${REGION_HEIGHT} --delay=${DELAY}"
}

region_from_pick_window() {
    echo_info "Click on window to record"
    xwindata=$(xwininfo)
    REGION_TL_X=$(echo "$xwindata" | grep '^  Absolute upper-left X:' | cut -d: -f2 | xargs echo )
    REGION_TL_Y=$(echo "$xwindata" | grep '^  Absolute upper-left Y:' | cut -d: -f2 | xargs echo )
    REGION_WIDTH=$(echo "$xwindata" | grep '^  Width:' | cut -d: -f2 | xargs echo )
    REGION_HEIGHT=$(echo "$xwindata" | grep '^  Height:' | cut -d: -f2 | xargs echo )
    validate_region_set
}

native_echo() {
    $(which echo) "$@"
}

query_pause() {
    echo -n "${GREEN}$@${RESET}"
    read unused
}

interactive_region() {
    query_pause "Hover mouse cursor over top left corner and press <Enter>."
    eval $(xdotool getmouselocation --shell 2>/dev/null)
    REGION_TL_X=$X;
    REGION_TL_Y=$Y;
    native_echo -en '\033[2K\r'
    echo "Got coordinate: ($REGION_TL_X, $REGION_TL_Y)"
    query_pause "Hover mouse cursor over bottom right corner and press <Enter>."
    eval $(xdotool getmouselocation --shell 2>/dev/null)
    REGION_WIDTH=$(($X-$REGION_TL_X))
    REGION_HEIGHT=$(($Y-$REGION_TL_Y))
     echo "Got dimensions: ($REGION_WIDTH, $REGION_HEIGHT)"
    parse_region "${REGION_TL_X},${REGION_TL_Y},${REGION_WIDTH},${REGION_HEIGHT}"
}

main() {
    parse_arguments "$@"
    check_command xdotool xwininfo
    process_arguments

    # Determine region area
    if [ $INTERACTIVE_REGION ] ; then
        interactive_region
    elif [ $pick_window_flag ] ; then
        region_from_pick_window
    fi

    if [ "$dry_run_flag" ] ; then
        recreate_command_from_values
        exit 0
    fi
    # Do gif capture
}



main "$@"
